import { modelDeploymentInfo, raiPolicyInfo } from './ai_ml/ai-services.bicep'
import { identityInfo } from './security/managed-identity.bicep'
import { vnetConfigInfo } from './containers/vnet-config.bicep'

targetScope = 'resourceGroup'

var audienceMap = {
  AzureCloud: '41b23e61-6c1e-4545-b367-cd054e0ed4b4'
  AzureUSGovernment: '51bb15d4-3a4f-4ebf-9dca-40096fe32426'
  AzureGermanCloud: '538ee9e6-310a-468d-afef-ea97365856a9'
  AzureChinaCloud: '49f817b6-84ae-4cc0-928c-73f27289b3aa'
}

var tenantId = ''

// var tenantId = subscription().tenantId
// var cloud = environment().name
// var audience = audienceMap[cloud]
// var tenant = uri(environment().authentication.loginEndpoint, tenantId)
// var issuer = 'https://sts.windows.net/${tenantId}/'

@description('Environment name used as a tag for all resources. This is directly mapped to the azd-environment.')
param environmentName string = ''

@minLength(1)
@maxLength(48)
@description('Name of the workload which is used to generate a short unique hash used in all resources.')
param workloadName string

@minLength(1)
@description('Primary location for all resources.')
param location string

@minLength(6)
@maxLength(72)
@description('Test vm gpt user password. Use strong password with letters and numbers. Needed only when choosing network isolation and create bastion option. If not creating with network isolation you can write anything. Password must be between 6-72 characters long and must satisfy at least 3 of password complexity requirements from the following: 1-Contains an uppercase character, 2-Contains a lowercase character, 3-Contains a numeric digit, 4-Contains a special character, 5- Control characters are not allowed.')
@secure()
param vmUserInitialPassword string

@description('Deploy VM? If yes it will create the virtual machine to access the network isolated environment in the zero trust configuration.')
@allowed([true, false])
param deployVM bool = true
var _deployVM = deployVM

@description('Deploy VPN?')
@allowed([true, false])
param deployVPN bool = false
var _deployVPN = deployVPN

@description('Deploy App Config values in private network')
@allowed([true, false])
param deployAppConfigValues bool = true
var _deployAppConfigValues = deployAppConfigValues

@description('Test vm gpt user name. Needed only when choosing network isolation and create bastion option. If not you can leave it blank.')
param vmUserName string = ''
var _vmUserName = !empty(vmUserName) ? vmUserName : 'gptrag'

@description('Id of the user or app to assign application roles')
param principalId string = ''

@description('Name of the resource group where all resources will be created. When empty, the name is autogenerated.')
param resourceGroupName string = ''
var _resourceGroupName = !empty(resourceGroupName) ? resourceGroupName : '${abbrs.managementGovernance.resourceGroup}-${environmentName}'
//var resourceGroupName = '${abbrs.managementGovernance.resourceGroup}${workloadName}'

@description('Tags for all resources.')
param tags object = {
  'azd-env-name' : environmentName
  WorkloadName: workloadName
  Environment: 'Dev'
}

var abbrs = loadJsonContent('./abbreviations.json')
var roles = loadJsonContent('./roles.json')
var suffix = toLower(uniqueString(resourceGroup().id, workloadName, location, _resourceGroupName))

@description('The name of the Azure Storage Account Private Endpoint. If left empty, a random name will be generated.')
param azureBlobStorageAccountPe string = ''
var _azureBlobStorageAccountPe = !empty(azureBlobStorageAccountPe) ? azureBlobStorageAccountPe : '${abbrs.storage.storageAccount}blob${abbrs.networking.privateEndpoint}${suffix}'

param azureTableStorageAccountPe string = ''
var _azureTableStorageAccountPe = !empty(azureTableStorageAccountPe) ? azureTableStorageAccountPe : '${abbrs.storage.storageAccount}table${abbrs.networking.privateEndpoint}${suffix}'

param azureQueueStorageAccountPe string = ''
var _azureQueueStorageAccountPe = !empty(azureQueueStorageAccountPe) ? azureQueueStorageAccountPe : '${abbrs.storage.storageAccount}queue${abbrs.networking.privateEndpoint}${suffix}'

param azureFileStorageAccountPe string = ''
var _azureFileStorageAccountPe = !empty(azureFileStorageAccountPe) ? azureFileStorageAccountPe : '${abbrs.storage.storageAccount}file${abbrs.networking.privateEndpoint}${suffix}'

@description('Settings to define reusable resources.')
var _azureReuseConfigDefaults = {
  containerRegistryReuse: false
  existingContainerRegistryResourceGroupName: ''
  aoaiReuse: false
  existingAoaiResourceGroupName: ''
  existingAoaiName: ''
  appInsightsReuse: false
  existingAppInsightsResourceGroupName: ''
  existingAppInsightsName: ''
  appConfigReuse: false
  existingAppConfigResourceGroupName: ''
  existingAppConfigName: ''
  logAnalyticsWorkspaceReuse: false
  existingLogAnalyticsWorkspaceResourceId: ''
  appServicePlanReuse: false
  existingAppServicePlanResourceGroupName: ''
  existingAppServicePlanName: ''
  aiSearchReuse: false
  existingAiSearchResourceGroupName: ''
  existingAiSearchName: ''
  aiServicesReuse: false
  existingAiServicesResourceGroupName: ''
  existingAiServicesName: ''
  cosmosDbReuse: false
  existingCosmosDbResourceGroupName: ''
  existingCosmosDbAccountName: ''
  existingCosmosDbDatabaseName : ''
  keyVaultReuse: false
  existingKeyVaultResourceGroupName: ''
  existingKeyVaultName: ''
  storageReuse: false
  existingStorageResourceGroupName: ''
  existingStorageName: ''
  vnetReuse: false
  existingVnetResourceGroupName: ''
  existingVnetName: ''
  orchestratorFunctionAppReuse: false
  existingOrchestratorFunctionAppResourceGroupName: ''
  existingOrchestratorFunctionAppName: ''
  dataIngestionFunctionAppReuse: false
  existingDataIngestionFunctionAppResourceGroupName: ''
  existingDataIngestionFunctionAppName: ''
  appServiceReuse: false
  existingAppServiceName: ''
  existingAppServiceNameResourceGroupName: ''
  orchestratorFunctionAppStorageReuse: false
  existingOrchestratorFunctionAppStorageName: ''
  existingOrchestratorFunctionAppStorageResourceGroupName: ''
  dataIngestionFunctionAppStorageReuse: false
  existingDataIngestionFunctionAppStorageName: ''
  existingDataIngestionFunctionAppStorageResourceGroupName: ''
}

param azureReuseConfig object = {}
var _azureReuseConfig = union(_azureReuseConfigDefaults, {
    aoaiReuse: (empty(azureReuseConfig.aoaiReuse) ? _azureReuseConfigDefaults.aoaiReuse : toLower(azureReuseConfig.aoaiReuse) == 'true')
    existingAoaiResourceGroupName: (empty(azureReuseConfig.existingAoaiResourceGroupName) ? _azureReuseConfigDefaults.existingAoaiResourceGroupName : azureReuseConfig.existingAoaiResourceGroupName)
    existingAoaiName: (empty(azureReuseConfig.existingAoaiName) ? _azureReuseConfigDefaults.existingAoaiName : azureReuseConfig.existingAoaiName)
    aiServicesReuse: (empty(azureReuseConfig.aiServicesReuse) ? _azureReuseConfigDefaults.aiServicesReuse : toLower(azureReuseConfig.aiServicesReuse) == 'true')
    existingAiServicesResourceGroupName: (empty(azureReuseConfig.existingAiServicesResourceGroupName) ? _azureReuseConfigDefaults.existingAiServicesResourceGroupName : azureReuseConfig.existingAiServicesResourceGroupName)
    existingAiServicesName: (empty(azureReuseConfig.existingAiServicesName) ? _azureReuseConfigDefaults.existingAiServicesName : azureReuseConfig.existingAiServicesName)
    //appConfigReuse: (empty(azureReuseConfig.appConfigReuse) ? _azureReuseConfigDefaults.appConfigReuse : toLower(azureReuseConfig.appConfigReuse) == 'true')
    //existingAppConfigResourceGroupName: (empty(azureReuseConfig.existingAppConfigResourceGroupName) ? _azureReuseConfigDefaults.existingAppConfigResourceGroupName : azureReuseConfig.existingAppConfigResourceGroupName)
    //existingAppConfigName: (empty(azureReuseConfig.existingAppConfigName) ? _azureReuseConfigDefaults.existingAppConfigName : azureReuseConfig.existingAppConfigName)
    appConfigReuse: false
    existingAppConfigResourceGroupName: ''
    existingAppConfigName: ''
    appInsightsReuse: (empty(azureReuseConfig.appInsightsReuse) ? _azureReuseConfigDefaults.appInsightsReuse : toLower(azureReuseConfig.appInsightsReuse) == 'true')
    existingAppInsightsResourceGroupName: (empty(azureReuseConfig.existingAppInsightsResourceGroupName) ? _azureReuseConfigDefaults.existingAppInsightsResourceGroupName : azureReuseConfig.existingAppInsightsResourceGroupName)
    existingAppInsightsName: (empty(azureReuseConfig.existingAppInsightsName) ? _azureReuseConfigDefaults.existingAppInsightsName : azureReuseConfig.existingAppInsightsName)
    logAnalyticsWorkspaceReuse: (empty(azureReuseConfig.logAnalyticsWorkspaceReuse) ? _azureReuseConfigDefaults.logAnalyticsWorkspaceReuse : toLower(azureReuseConfig.logAnalyticsWorkspaceReuse) == 'true')
    existingLogAnalyticsWorkspaceResourceId: (empty(azureReuseConfig.existingLogAnalyticsWorkspaceResourceId) ? _azureReuseConfigDefaults.existingLogAnalyticsWorkspaceResourceId : azureReuseConfig.existingLogAnalyticsWorkspaceResourceId)
    appServicePlanReuse: (empty(azureReuseConfig.appServicePlanReuse) ? _azureReuseConfigDefaults.appServicePlanReuse : toLower(azureReuseConfig.appServicePlanReuse) == 'true')
    existingAppServicePlanResourceGroupName: (empty(azureReuseConfig.existingAppServicePlanResourceGroupName) ? _azureReuseConfigDefaults.existingAppServicePlanResourceGroupName : azureReuseConfig.existingAppServicePlanResourceGroupName)
    existingAppServicePlanName: (empty(azureReuseConfig.existingAppServicePlanName) ? _azureReuseConfigDefaults.existingAppServicePlanName : azureReuseConfig.existingAppServicePlanName)
    aiSearchReuse: (empty(azureReuseConfig.aiSearchReuse) ? _azureReuseConfigDefaults.aiSearchReuse : toLower(azureReuseConfig.aiSearchReuse) == 'true')
    existingAiSearchResourceGroupName: (empty(azureReuseConfig.existingAiSearchResourceGroupName) ? _azureReuseConfigDefaults.existingAiSearchResourceGroupName : azureReuseConfig.existingAiSearchResourceGroupName)
    existingAiSearchName: (empty(azureReuseConfig.existingAiSearchName) ? _azureReuseConfigDefaults.existingAiSearchName : azureReuseConfig.existingAiSearchName)
    cosmosDbReuse: (empty(azureReuseConfig.cosmosDbReuse) ? _azureReuseConfigDefaults.cosmosDbReuse : toLower(azureReuseConfig.cosmosDbReuse) == 'true')
    existingCosmosDbResourceGroupName: (empty(azureReuseConfig.existingCosmosDbResourceGroupName) ? _azureReuseConfigDefaults.existingCosmosDbResourceGroupName : azureReuseConfig.existingCosmosDbResourceGroupName)
    existingCosmosDbAccountName: (empty(azureReuseConfig.existingCosmosDbAccountName) ? _azureReuseConfigDefaults.existingCosmosDbAccountName : azureReuseConfig.existingCosmosDbAccountName)
    existingCosmosDbDatabaseName: (empty(azureReuseConfig.existingCosmosDbDatabaseName) ? _azureReuseConfigDefaults.existingCosmosDbDatabaseName : azureReuseConfig.existingCosmosDbDatabaseName)
    keyVaultReuse: (empty(azureReuseConfig.keyVaultReuse) ? _azureReuseConfigDefaults.keyVaultReuse : toLower(azureReuseConfig.keyVaultReuse) == 'true')
    existingKeyVaultResourceGroupName: (empty(azureReuseConfig.existingKeyVaultResourceGroupName) ? _azureReuseConfigDefaults.existingKeyVaultResourceGroupName : azureReuseConfig.existingKeyVaultResourceGroupName)
    existingKeyVaultName: (empty(azureReuseConfig.existingKeyVaultName) ? _azureReuseConfigDefaults.existingKeyVaultName : azureReuseConfig.existingKeyVaultName)
    storageReuse: (empty(azureReuseConfig.storageReuse) ? _azureReuseConfigDefaults.storageReuse : toLower(azureReuseConfig.storageReuse) == 'true')
    existingStorageResourceGroupName: (empty(azureReuseConfig.existingStorageResourceGroupName) ? _azureReuseConfigDefaults.existingStorageResourceGroupName : azureReuseConfig.existingStorageResourceGroupName)
    existingStorageName: (empty(azureReuseConfig.existingStorageName) ? _azureReuseConfigDefaults.existingStorageName : azureReuseConfig.existingStorageName)
    vnetReuse: (empty(azureReuseConfig.vnetReuse) ? _azureReuseConfigDefaults.vnetReuse : toLower(azureReuseConfig.vnetReuse) == 'true')
    existingVnetResourceGroupName: (empty(azureReuseConfig.existingVnetResourceGroupName) ? _azureReuseConfigDefaults.existingVnetResourceGroupName : azureReuseConfig.existingVnetResourceGroupName)
    existingVnetName: (empty(azureReuseConfig.existingVnetName) ? _azureReuseConfigDefaults.existingVnetName : azureReuseConfig.existingVnetName)
    orchestratorFunctionAppReuse: (empty(azureReuseConfig.orchestratorFunctionAppReuse) ? _azureReuseConfigDefaults.orchestratorFunctionAppReuse: toLower(azureReuseConfig.orchestratorFunctionAppReuse) == 'true')
    existingOrchestratorFunctionAppResourceGroupName: (empty(azureReuseConfig.existingOrchestratorFunctionAppResourceGroupName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppResourceGroupName : azureReuseConfig.existingOrchestratorFunctionAppResourceGroupName)
    existingOrchestratorFunctionAppName: (empty(azureReuseConfig.existingOrchestratorFunctionAppName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppName : azureReuseConfig.existingOrchestratorFunctionAppName)
    dataIngestionFunctionAppReuse: (empty(azureReuseConfig.dataIngestionFunctionAppReuse) ? _azureReuseConfigDefaults.dataIngestionFunctionAppReuse : toLower(azureReuseConfig.dataIngestionFunctionAppReuse) == 'true')
    existingDataIngestionFunctionAppResourceGroupName: (empty(azureReuseConfig.existingDataIngestionFunctionAppResourceGroupName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppResourceGroupName : azureReuseConfig.existingDataIngestionFunctionAppResourceGroupName)
    existingDataIngestionFunctionAppName: (empty(azureReuseConfig.existingDataIngestionFunctionAppName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppName : azureReuseConfig.existingDataIngestionFunctionAppName)
    appServiceReuse: (empty(azureReuseConfig.appServiceReuse) ? _azureReuseConfigDefaults.appServiceReuse : toLower(azureReuseConfig.appServiceReuse) == 'true')
    existingAppServiceName: (empty(azureReuseConfig.existingAppServiceName) ? _azureReuseConfigDefaults.existingAppServiceName : azureReuseConfig.existingAppServiceName)
    existingAppServiceNameResourceGroupName: (empty(azureReuseConfig.existingAppServiceNameResourceGroupName) ? _azureReuseConfigDefaults.existingAppServiceNameResourceGroupName : azureReuseConfig.existingAppServiceNameResourceGroupName)
    orchestratorFunctionAppStorageReuse: (empty(azureReuseConfig.orchestratorFunctionAppStorageReuse) ? _azureReuseConfigDefaults.orchestratorFunctionAppStorageReuse : toLower(azureReuseConfig.orchestratorFunctionAppStorageReuse) == 'true')
    existingOrchestratorFunctionAppStorageName: (empty(azureReuseConfig.existingOrchestratorFunctionAppStorageName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppStorageName : azureReuseConfig.existingOrchestratorFunctionAppStorageName)
    existingOrchestratorFunctionAppStorageResourceGroupName: (empty(azureReuseConfig.existingOrchestratorFunctionAppStorageResourceGroupName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppStorageResourceGroupName : azureReuseConfig.existingOrchestratorFunctionAppStorageResourceGroupName)
    dataIngestionFunctionAppStorageReuse: (empty(azureReuseConfig.dataIngestionFunctionAppStorageReuse) ? _azureReuseConfigDefaults.dataIngestionFunctionAppStorageReuse : toLower(azureReuseConfig.dataIngestionFunctionAppStorageReuse) == 'true')
    existingDataIngestionFunctionAppStorageName: (empty(azureReuseConfig.existingDataIngestionFunctionAppStorageName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppStorageName : azureReuseConfig.existingDataIngestionFunctionAppStorageName)
    existingDataIngestionFunctionAppStorageResourceGroupName: (empty(azureReuseConfig.existingDataIngestionFunctionAppStorageResourceGroupName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppStorageResourceGroupName : azureReuseConfig.existingDataIngestionFunctionAppStorageResourceGroupName)
  }
)

@description('Name of the container image.')
param containerImageName string

@description('Network isolation? If yes it will create the private endpoints.')
@allowed([true, false])
param networkIsolation bool = false
var _networkIsolation = networkIsolation

@description('Virtual network name, you can leave as it is to generate a random name.')
param vnetName string = ''
var _vnetName = _azureReuseConfig.vnetReuse ? _azureReuseConfig.existingVnetName : !empty(vnetName) ? vnetName : '${abbrs.networking.aivnet}${suffix}'

@description('The name of the VM Key Vault Secret. If left empty, a random name will be generated.')
param vmKeyVaultSecName string = ''
var _vmKeyVaultSecName = !empty(vmKeyVaultSecName) ? vmKeyVaultSecName : 'vmUserInitialPassword'

@description('The name of the Zero Trust VM. If left empty, a random name will be generated.')
param ztVmName string = ''
var _ztVmName = !empty(ztVmName) ? ztVmName : 'testvm-${suffix}'

@description('GPT model used to answer user questions. Don\'t forget to check region availability.')
// @allowed([ 'gpt-35-turbo','gpt-35-turbo-16k', 'gpt-4', 'gpt-4-32k', 'gpt-4o', 'gpt-4o-mini' ])
param chatGptModelName string = ''
var _chatGptModelName = !empty(chatGptModelName) ? chatGptModelName : 'gpt-4o'

@description('GPT model deployment type.')
// @allowed([ 'Standard', 'ProvisionedManaged', 'GlobalStandard'])
param chatGptModelDeploymentType string = ''
var _chatGptModelDeploymentType = !empty(chatGptModelDeploymentType) ? chatGptModelDeploymentType : 'GlobalStandard'

@description('GPT model version.')
// @allowed([ '0613', '1106', '1106-Preview', '0125-preview', 'turbo-2024-04-09', '2024-05-13', '2024-11-20'])
param chatGptModelVersion string = ''
var _chatGptModelVersion = !empty(chatGptModelVersion) ? chatGptModelVersion : '2024-11-20'

@description('GPT model deployment name.')
param chatGptDeploymentName string = ''
var _chatGptDeploymentName = !empty(chatGptDeploymentName) ? chatGptDeploymentName : 'chat'

@description('GPT model tokens per Minute Rate Limit (thousands).')
// @minValue(1)
// @maxValue(300)
param chatGptDeploymentCapacity int = 0
var _chatGptDeploymentCapacity = chatGptDeploymentCapacity != 0 ? chatGptDeploymentCapacity : 30

@description('Embeddings model used to generate vector embeddings. Don\'t forget to check region availability.')
// @allowed([ 'text-embedding-ada-002', 'text-embedding-3-small', 'text-embedding-3-large' ])
param embeddingsModelName string = ''
var _embeddingsModelName = !empty(embeddingsModelName) ? embeddingsModelName : 'text-embedding-3-large'

@description('Embeddings model deployment type.')
// @allowed([ 'Standard'])
param embeddingsDeploymentType string = 'Standard'
var _embeddingsDeploymentType = !empty(embeddingsDeploymentType) ? embeddingsDeploymentType : 'Standard'

@description('Embeddings model version.')
// @allowed([ '1', '2' ])
param embeddingsModelVersion string = ''
var _embeddingsModelVersion = !empty(embeddingsModelVersion) ? embeddingsModelVersion : '1'

@description('Embeddings model deployment name.')
param embeddingsDeploymentName string = ''
var _embeddingsDeploymentName = !empty(embeddingsDeploymentName) ? embeddingsDeploymentName : 'text-embedding'

@description('Vector embeddings size.')
// @allowed([ 1536, 3072 ])
param embeddingsVectorSize int = 0
var _embeddingsVectorSize = embeddingsVectorSize != 0 ? embeddingsVectorSize : 3072

@description('Embeddings model tokens per Minute Rate Limit (thousands).')
param embeddingsDeploymentCapacity int = 0
var _embeddingsDeploymentCapacity = embeddingsDeploymentCapacity != 0 ? embeddingsDeploymentCapacity : 40

@description('Azure OpenAI API version.')
param openaiApiVersion string = ''
var _openaiApiVersion = !empty(openaiApiVersion) ? openaiApiVersion : '2025-01-01-preview'

@description('Enables LLM monitoring to generate conversation metrics.')
@allowed([true, false])
param chatGptLlmMonitoring bool = false
var _chatGptLlmMonitoring = chatGptLlmMonitoring != null ? chatGptLlmMonitoring : true

// App Insights Settings

@description('Provision Application Insights (and Log Analytics workspace) if true. Default is true.')
@allowed([true, false])
param provisionApplicationInsights bool = true
var _provisionApplicationInsights = provisionApplicationInsights

// App Configuration

@description('Provision Application Configuration if true. Default is true.')
@allowed([true, false])
param provisionAppConfig bool = true
var _provisionAppConfig = provisionAppConfig

@description('Key Vault Name. Use your own name convention or leave as it is to generate a random name.')
param keyVaultName string = ''
var _keyVaultName = _azureReuseConfig.keyVaultReuse ? _azureReuseConfig.existingKeyVaultName : !empty(keyVaultName) ? keyVaultName : '${abbrs.security.keyVault}${suffix}'
var _keyVaultResourceGroupName = _azureReuseConfig.keyVaultReuse ? _azureReuseConfig.existingKeyVaultResourceGroupName : _resourceGroupName

@description('OpenAI Service Name. Use your own name convention or leave as it is to generate a random name.')
param openAiServiceName string = ''
var _openAiServiceName = _azureReuseConfig.aoaiReuse ? _azureReuseConfig.existingAoaiName : !empty(openAiServiceName) ? openAiServiceName : 'oai0-${suffix}'
var _openAiResourceGroupName = _azureReuseConfig.aoaiReuse ? _azureReuseConfig.existingAoaiResourceGroupName : _resourceGroupName

@description('AI services multi-service name. Use your own name convention or leave as it is to generate a random name.')
param aiServicesName string = ''
var _aiServicesName = _azureReuseConfig.aiServicesReuse ? _azureReuseConfig.existingAiServicesName : !empty(aiServicesName) ? aiServicesName : '${abbrs.ai.aiServices}${suffix}'
var _aiServicesResourceGroupName = _azureReuseConfig.aiServicesReuse ? _azureReuseConfig.existingAiServicesResourceGroupName : _resourceGroupName


@description('Name of the container where source documents will be stored.')
param storageContainerName string = ''
var _storageContainerName = !empty(storageContainerName) ? storageContainerName : 'documents'
var _storageImagesContainerName = '${_storageContainerName}-images'
var _storageNl2sqlContainerName = 'nl2sql'

@description('Storage Account Name. Use your own name convention or leave as it is to generate a random name.')
param storageAccountName string = ''
var _storageAccountName = _azureReuseConfig.storageReuse ? _azureReuseConfig.existingStorageName : !empty(storageAccountName) ? storageAccountName : '${abbrs.storage.storageAccount}${suffix}'
var _storageAccountResourceGroupName = _azureReuseConfig.storageReuse ? _azureReuseConfig.existingStorageResourceGroupName : _resourceGroupName

@description('Responsible AI policies for the Azure AI Services instance.')
param raiPolicies raiPolicyInfo[] = [
  {
    name: workloadName
    mode: 'Blocking'
    prompt: {}
    completion: {}
  }
]

@description('Name of the Azure OpenAI completion model for the application. Default is gpt-4o.')
param chatModelDeploymentModel string = 'gpt-4o'

@description('Model deployment for Azure OpenAI chat completion.')
param chatModelDeployment modelDeploymentInfo = {
  name: 'gpt-4o'
  model: { format: 'OpenAI', name: 'gpt-4o', version: '2024-11-20' }
  sku: { name: 'GlobalStandard', capacity: 10 }
  raiPolicyName: workloadName
  versionUpgradeOption: 'OnceCurrentVersionExpired'
}

@description('Identities to assign roles to.')
param identities identityInfo[] = union([], [{
  principalId: principalId
  principalType: 'User'
}])

resource contributorRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  // scope: resourceGroup
  name: roles.general.contributor
}

resource appConfigDataOwnerRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  // scope: resourceGroup
  name: roles.configuration.appConfigurationDataOwner
}

// resource resourceGroup 'Microsoft.Resources/resourceGroups@2024-03-01' = {
//   name: resourceGroupName
//   location: location
//   tags: union(tags, {})
// }

var appConfigDataOwnerIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: appConfigDataOwnerRole.id
    principalType: identity.principalType
  }
]

var allConfigDataOwnerIdentityAssignments = concat(appConfigDataOwnerIdentityAssignments, [
  {
    principalId: aiServiceManagedIdentity.outputs.principalId
    roleDefinitionId: appConfigDataOwnerRole.id
    principalType: 'ServicePrincipal'
  }
])

var contributorIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: contributorRole.id
    principalType: identity.principalType
  }
]

var resourceGroupRoleAssignmentName = '${_resourceGroupName}-role'
module resourceGroupRoleAssignment './security/resource-group-role-assignment.bicep' = {
  name: resourceGroupRoleAssignmentName
  // scope: resourceGroup
  params: {
    roleAssignments: concat(contributorIdentityAssignments, [], allConfigDataOwnerIdentityAssignments)
  }
}

resource keyVaultSecretsUserRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  // scope: resourceGroup
  name: roles.security.keyVaultSecretsUser
}

var keyVaultSecretsUserIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: keyVaultSecretsUserRole.id
    principalType: identity.principalType
  }
]

@description('Address space for the virtual network')
param vnetAddress string = ''
var _vnetAddress = !empty(vnetAddress) ? vnetAddress : '10.0.0.0/23'

@description('Name of the AI services subnet')
param aiSubnetName string = ''
var _aiSubnetName = !empty(aiSubnetName) ? aiSubnetName : 'ai-subnet'

@description('Address prefix for the AI services subnet')
param aiSubnetPrefix string = ''
var _aiSubnetPrefix = !empty(aiSubnetPrefix) ? aiSubnetPrefix : '10.0.0.0/26'

@description('Name of the AI services subnet')
param acaSubnetName string = ''
var _acaSubnetName = !empty(acaSubnetName) ? acaSubnetName : 'aca-subnet'

@description('Address prefix for the AI services subnet')
param acaSubnetPrefix string = ''
var _acaSubnetPrefix = !empty(acaSubnetPrefix) ? acaSubnetPrefix : '10.0.1.64/26'

@description('Name of the Bastion subnet')
var _bastionSubnetName = 'AzureBastionSubnet'

@description('Address prefix for the Bastion subnet')
param bastionSubnetPrefix string = ''
var _bastionSubnetPrefix = !empty(bastionSubnetPrefix) ? bastionSubnetPrefix : '10.0.0.64/26'

@description('Name of the App Integration subnet')
param appIntSubnetName string = ''
var _appIntSubnetName = !empty(appIntSubnetName) ? appIntSubnetName : 'app-int-subnet'

@description('Address prefix for the App Integration subnet')
param appIntSubnetPrefix string = ''
var _appIntSubnetPrefix = !empty(appIntSubnetPrefix) ? appIntSubnetPrefix : '10.0.0.128/26'

@description('Name of the App Services subnet')
param appServicesSubnetName string = ''
var _appServicesSubnetName = !empty(appServicesSubnetName) ? appServicesSubnetName : 'app-services-subnet'

@description('Address prefix for the App Services subnet')
param appServicesSubnetPrefix string = ''
var _appServicesSubnetPrefix = !empty(appServicesSubnetPrefix) ? appServicesSubnetPrefix : '10.0.0.192/26'

@description('Name of the Database subnet')
param databaseSubnetName string = ''
var _databaseSubnetName = !empty(databaseSubnetName) ? databaseSubnetName : 'database-subnet'

@description('Address prefix for the Database subnet')
param databaseSubnetPrefix string = ''
var _databaseSubnetPrefix = !empty(databaseSubnetPrefix) ? databaseSubnetPrefix : '10.0.1.0/26'

// flag that indicates if we're reusing a vnet
var _vnetReuse = _azureReuseConfig.vnetReuse

module vaultDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'vault-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.vaultcore.azure.net'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module blobDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'blob-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.blob.${environment().suffixes.storage}'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module queueDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  // scope : resourceGroup
  name: 'queue-dnzones'
  params: {
    dnsZoneName: 'privatelink.queue.${environment().suffixes.storage}'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module tableDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  // scope : resourceGroup
  name: 'table-dnzones'
  params: {
    dnsZoneName: 'privatelink.table.${environment().suffixes.storage}'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module fileDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  // scope : resourceGroup
  name: 'file-dnzones'
  params: {
    dnsZoneName: 'privatelink.file.${environment().suffixes.storage}'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module documentsDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'documents-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.documents.azure.com'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module appConfigDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'appconfig-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.azconfig.io'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module websitesDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'websites-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.azurewebsites.net'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module aiservicesDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'aiservices-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.cognitiveservices.azure.com'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module openaiDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'openai-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.openai.azure.com'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module searchDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'searchs-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.search.windows.net'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module containerRegistryDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'cr-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.azurecr.io'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module automationDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'automation-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.agentsvc.azure-automation.net'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module odsInsightsDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'odsinsights-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.ods.opinsights.azure.com'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module omsInsightsDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'omsinsights-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.oms.opinsights.azure.com'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module azMonitorDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'azmonitor-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.monitor.azure.com'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module acaDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'aca-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.eastus2.azurecontainerapps.io'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

var keyVaultPeName = '${abbrs.security.keyVault}${abbrs.security.privateEndpoint}${suffix}'
module keyvaultpe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: keyVaultPeName
  // scope: resourceGroup
  params: {
    location: location
    name: keyVaultPeName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: keyVault.outputs.id
    groupIds: ['Vault']
    dnsZoneId: _networkIsolation?vaultDnsZone.outputs.id:''
  }
}

module keyVault './security/key-vault.bicep' = {
  name: _keyVaultName
  // scope: resourceGroup
  params: {
    keyVaultReuse : _azureReuseConfig.keyVaultReuse
    existingKeyVaultResourceGroupName: _azureReuseConfig.existingKeyVaultResourceGroupName
    name: _keyVaultName
    location: location
    tags: union(tags, {})
    roleAssignments: concat(keyVaultSecretsUserIdentityAssignments, [])
    secureAppSettings: secureAppSettings
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
    subnets: [
      {
        name: 'aiSubId'
        id: _networkIsolation?vnet.outputs.aiSubId:''
      }
    ]
  }
}

var secureAppSettings = [
  {
    name: 'vmUserInitialPassword'
    value: vmUserInitialPassword
  }
]

var appSettings = [
  {
    name: 'AZURE_OPENAI_SERVICE_NAME'
    value: _openAiServiceName
  }
  {
    name: 'AZURE_OPENAI_EMBEDDING_DEPLOYMENT'
    value: _embeddingsDeploymentName
  }
  {
    name: 'AZURE_OPENAI_TEMPERATURE'
    value: '0.1'
  }
  {
    name: 'AZURE_OPENAI_TOP_P'
    value: '0.27'
  }
  {
    name: 'AZURE_OPENAI_MAX_TOKENS'
    value: '1000'
  }
  {
    name: 'AZURE_OPENAI_LOAD_BALANCING'
    value: 'false'
  }
  {
    name: 'AZURE_EMBEDDINGS_VECTOR_SIZE'
    value: _embeddingsVectorSize
  }
  {
    name: 'AZURE_OPENAI_EMBEDDING_MODEL'
    value: _embeddingsModelName
  }
  {
    name: 'AZURE_OPENAI_CHATGPT_DEPLOYMENT'
    value: _chatGptDeploymentName
  }
  {
    name: 'NETWORK_ISOLATION'
    value: _networkIsolation
  }

  {
    name: 'AZURE_STORAGE_ACCOUNT_RG'
    value: _storageAccountResourceGroupName
  }

  {
    name: 'AZURE_AOAI_RG'
    value: _openAiResourceGroupName
  }
  {
    name: 'AZURE_KEY_VAULT_NAME'
    value: keyVault.outputs.name
  }
  {
    name: 'AZURE_OPENAI_RESOURCE'
    value: _openAiServiceName
  }
  {
    name: 'AZURE_OPENAI_CHATGPT_MODEL'
    value: _chatGptModelName
  }
  {
    name: 'AZURE_OPENAI_API_VERSION'
    value: _openaiApiVersion
  }
  {
    name: 'AZURE_OPENAI_EMBEDDING_APIVERSION'
    value: _openaiApiVersion
  }
  {
    name: 'AZURE_SUBSCRIPTION_ID'
    value: subscription().subscriptionId
  }
  {
    name: 'AZURE_RESOURCE_GROUP_NAME'
    value: _resourceGroupName
  }
  {
    name: 'LOGLEVEL'
    value: 'INFO'
  }
  {
    name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
    value: _provisionApplicationInsights?applicationInsights.outputs.connectionString:''
  }
  {
    name: 'WEBSITE_HTTPLOGGING_RETENTION_DAYS'
    value: '7'
  }
]

var appConfigurationPEName = '${abbrs.configuration.appConfiguration}${abbrs.security.privateEndpoint}${suffix}'
module appConfigPe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: appConfigurationPEName
  // scope: resourceGroup
  params: {
    location: location
    name: appConfigurationPEName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: appConfig.outputs.id
    groupIds: ['configurationStores']
    dnsZoneId: _networkIsolation?appConfigDnsZone.outputs.id:''
  }
}

var applicationManagedIdentityName = '${abbrs.security.managedIdentity}${abbrs.configuration.appConfiguration}${suffix}'
module applicationManagedIdentity './security/managed-identity.bicep' = {
  // scope: resourceGroup
  name: applicationManagedIdentityName
  params: {
    name: applicationManagedIdentityName
    location: location
    tags: union(tags, {})
  }
}

module appConfig './app_config/appconfig.bicep' = if (provisionAppConfig) {
  name: 'appconfig'
  // scope: resourceGroup
  params: {
    //administratorObjectId: principalId
    //administratorPrincipalType: 'User'
    //actionGroupId: ''
    name : '${abbrs.configuration.appConfiguration}${suffix}'
    identityId: applicationManagedIdentity.outputs.id
    //appConfigReuse: _azureReuseConfig.appConfigReuse
    //existingAppConfigResourceGroupName: _azureReuseConfig.existingAppConfigResourceGroupName
    appSettings: (_networkIsolation && !_deployAppConfigValues)?[]:appSettings
    secureAppSettings: (_networkIsolation && !_deployAppConfigValues)?[]:keyVault.outputs.secrets
    location: location
    tags: tags
    //logAnalyticsWorkspaceResourceId: _azureReuseConfig.existingLogAnalyticsWorkspaceResourceId ?? ''
    //vaultName: keyVault.outputs.name
    //privateDnsZones: []
    //suffix: suffix
    //subnetId: (_networkIsolation && !_vnetReuse)?vnet.outputs.appIntSubId:''
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
  }
}

var logAnalyticsPEName = '${abbrs.managementGovernance.logAnalyticsWorkspace}${abbrs.security.privateEndpoint}${suffix}'
module logAnalyticsPe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: logAnalyticsPEName
  // scope: resourceGroup
  params: {
    location: location
    name: logAnalyticsPEName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: azureMonitorPrivateLinkScope.outputs.id
    groupIds: ['azuremonitor']
    dnsZoneId: _networkIsolation?azMonitorDnsZone.outputs.id:''
    //privateLinkServiceConnectionName: 'logAnalytics'
  }
}

var logAnalyticsWorkspaceName = '${abbrs.managementGovernance.logAnalyticsWorkspace}${suffix}'
module logAnalyticsWorkspace './management_governance/log-analytics-workspace.bicep' = {
  name: logAnalyticsWorkspaceName
  // scope: resourceGroup
  params: {
    name: logAnalyticsWorkspaceName
    location: location
    tags: union(tags, {})
  }
}

/*
var appInsightsPEName = '${abbrs.managementGovernance.applicationInsights}${abbrs.security.privateEndpoint}${suffix}'
module appInsightsPe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: appInsightsPEName
  scope: resourceGroup
  params: {
    location: location
    name: appInsightsPEName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: applicationInsights.outputs.id
    groupIds: ['azuremonitor']
    dnsZoneId: _networkIsolation?appConfigDnsZone.outputs.id:''
  }
}
  */

var applicationInsightsName = '${abbrs.managementGovernance.applicationInsights}${suffix}'
module applicationInsights './management_governance/application-insights.bicep' = {
  name: applicationInsightsName
  // scope: resourceGroup
  params: {
    name: applicationInsightsName
    location: location
    tags: union(tags, {})
    logAnalyticsWorkspaceName: logAnalyticsWorkspace.outputs.name
    publicNetworkAccessForIngestion: _networkIsolation?'Disabled':'Enabled'
    publicNetworkAccessForQuery: _networkIsolation?'Disabled':'Enabled'
  }
}

module azureMonitorPrivateLinkScope './security/private-link-scope.bicep' = if (_networkIsolation && !_vnetReuse) {
  // scope: resourceGroup
  name: '${abbrs.networking.privateLink}${suffix}'
  params: {
    privateLinkScopeName: '${abbrs.networking.privateLink}${suffix}'
    privateLinkScopedResources: [
      logAnalyticsWorkspace.outputs.id
      //applicationInsights.outputs.id
    ]
  }
}

resource cognitiveServicesUserRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  // scope: resourceGroup
  name: roles.ai.cognitiveServicesUser
}

resource cognitiveServicesOpenAIUserRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  // scope: resourceGroup
  name: roles.ai.cognitiveServicesOpenAIUser
}

var cognitiveServicesUserRoleAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: cognitiveServicesUserRole.id
    principalType: identity.principalType
  }
]

var cognitiveServicesOpenAIUserRoleAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: cognitiveServicesOpenAIUserRole.id
    principalType: identity.principalType
  }
]

var aiServiceManagedIdentityName = '${abbrs.security.managedIdentity}${abbrs.ai.aiServices}${suffix}'
module aiServiceManagedIdentity './security/managed-identity.bicep' = {
  name: aiServiceManagedIdentityName
  // scope: resourceGroup
  params: {
    name: aiServiceManagedIdentityName
    location: location
    tags: union(tags, {})
  }
}

var aiServicesPeName = '${abbrs.ai.aiServices}${abbrs.security.privateEndpoint}${suffix}'
module aiServicesPe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: aiServicesPeName
  // scope: resourceGroup
  params: {
    location: location
    name: aiServicesPeName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: aiServices.outputs.id
    groupIds: ['account']
    dnsZoneId: _networkIsolation?blobDnsZone.outputs.id:''
  }
}

module aiServices './ai_ml/ai-services.bicep' = {
  name: _aiServicesName
  // scope: resourceGroup
  params: {
    identityId: aiServiceManagedIdentity.outputs.id
    identityClientId: aiServiceManagedIdentity.outputs.clientId
    identityPrincipalId: aiServiceManagedIdentity.outputs.principalId
    aiServicesReuse: _azureReuseConfig.aiServicesReuse
    existingAiServicesResourceGroupName: _azureReuseConfig.existingAiServicesResourceGroupName
    name: _aiServicesName
    location: location
    tags: union(tags, {})
    raiPolicies: raiPolicies
    logAnalyticsWorkspaceName: logAnalyticsWorkspace.outputs.name
    deployments: [
      chatModelDeployment
    ]
    roleAssignments: concat(cognitiveServicesUserRoleAssignments, cognitiveServicesOpenAIUserRoleAssignments, [])
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
  }
}

// Require self-referencing role assignment for AI Services identity to access Azure OpenAI.
module aiServicesRoleAssignment './security/resource-role-assignment.json' = {
  name: '${aiServicesName}-role'
  // scope: resourceGroup
  params: {
    resourceId: aiServices.outputs.id
    roleAssignments: [
      {
        principalId: aiServices.outputs.principalId
        roleDefinitionId: cognitiveServicesUserRole.id
        principalType: 'ServicePrincipal'
      }
    ]
  }
}

// Required RBAC roles for Azure Functions to access the storage account
// https://learn.microsoft.com/en-us/azure/azure-functions/functions-reference?tabs=blob&pivots=programming-language-python#connecting-to-host-storage-with-an-identity
resource storageAccountContributorRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  // scope: resourceGroup
  name: roles.storage.storageAccountContributor
}

resource storageBlobDataContributorRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  // scope: resourceGroup
  name: roles.storage.storageBlobDataContributor
}

resource storageBlobDataOwnerRole 'Microsoft.Authorization/roleDefinitions@2022-04-01' existing = {
  // scope: resourceGroup
  name: roles.storage.storageBlobDataOwner
}

resource storageFileDataPrivilegedContributorRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  // scope: resourceGroup
  name: roles.storage.storageFileDataPrivilegedContributor
}

resource storageTableDataContributorRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  // scope: resourceGroup
  name: roles.storage.storageTableDataContributor
}

resource storageQueueDataContributorRole 'Microsoft.Authorization/roleDefinitions@2022-04-01' existing = {
  // scope: resourceGroup
  name: roles.storage.storageQueueDataContributor
}

var storageAccountContributorIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: storageAccountContributorRole.id
    principalType: identity.principalType
  }
]

var storageBlobDataContributorIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: storageBlobDataContributorRole.id
    principalType: identity.principalType
  }
]

var storageBlobDataOwnerIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: storageBlobDataOwnerRole.id
    principalType: identity.principalType
  }
]

var storageFileDataPrivilegedContributorIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: storageFileDataPrivilegedContributorRole.id
    principalType: identity.principalType
  }
]

var storageTableDataContributorIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: storageTableDataContributorRole.id
    principalType: identity.principalType
  }
]

var storageQueueDataContributorIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: storageQueueDataContributorRole.id
    principalType: identity.principalType
  }
]

module vnet './network/vnet.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'virtual-network'
  // scope: resourceGroup
  params: {
    location: location
    vnetName: _vnetName
    vnetReuse: _vnetReuse
    existingVnetResourceGroupName: _azureReuseConfig.existingVnetResourceGroupName
    tags: tags
    vnetAddress: _vnetAddress
    aiSubnetName: _aiSubnetName
    aiSubnetPrefix: _aiSubnetPrefix
    acaSubnetName: _acaSubnetName
    acaSubnetPrefix: _acaSubnetPrefix
    bastionSubnetName: _bastionSubnetName
    bastionSubnetPrefix: _bastionSubnetPrefix
  }
}

module vpnGateway './network/vnet-vpn-gateway.bicep' = if (_networkIsolation && !_vnetReuse && _deployVPN) {
  // scope : resourceGroup
  name: 'vpn-gateway'
  params: {
    location: location
    vnetName: _vnetName
    tags: tags
  }
}

module storageAccountPe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'storage-blob-pe'
  // scope: resourceGroup
  params: {
    location: location
    name: _azureBlobStorageAccountPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: storageAccount.outputs.id
    groupIds: ['blob']
    dnsZoneId: _networkIsolation?blobDnsZone.outputs.id:''
  }
}

module storagetablepe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  // scope : resourceGroup
  name: 'storage-table-pe'
  params: {
    location: location
    name: _azureTableStorageAccountPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: storageAccount.outputs.id
    groupIds: ['table']
    dnsZoneId: _networkIsolation?tableDnsZone.outputs.id:''
  }
}

module storagequeuepe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  // scope : resourceGroup
  name: 'storage-queue-pe'
  params: {
    location: location
    name: _azureQueueStorageAccountPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: storageAccount.outputs.id
    groupIds: ['queue']
    dnsZoneId: _networkIsolation?queueDnsZone.outputs.id:''
  }
}

module storagefilepe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  // scope : resourceGroup
  name: 'storage-file-pe'
  params: {
    location: location
    name: _azureFileStorageAccountPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: storageAccount.outputs.id
    groupIds: ['file']
    dnsZoneId: _networkIsolation?fileDnsZone.outputs.id:''
  }
}

module storageAccount './storage/storage-account.bicep' = {
  name: _storageAccountName
  // scope: resourceGroup
  params: {
    name: _storageAccountName
    location: location
    tags: union(tags, {})
    sku: {
      name: 'Standard_LRS'
    }
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
    roleAssignments: concat(
      storageAccountContributorIdentityAssignments,
      storageBlobDataContributorIdentityAssignments,
      storageBlobDataOwnerIdentityAssignments,
      storageFileDataPrivilegedContributorIdentityAssignments,
      storageTableDataContributorIdentityAssignments,
      storageQueueDataContributorIdentityAssignments,
      [
        {
          principalId: aiServices.outputs.principalId
          roleDefinitionId: storageBlobDataContributorRole.id
          principalType: 'ServicePrincipal'
        }
      ]
    )
  }
}

// DEMO: Create a container in the storage account for processing documents
var documentsContainerName = 'documents'
module documentsContainer 'storage/storage-blob-container.bicep' = {
  name: '${storageAccount.name}-container-${documentsContainerName}'
  // scope: resourceGroup
  params: {
    name: documentsContainerName
    storageAccountName: storageAccount.outputs.name
  }
}

resource acrPushRole 'Microsoft.Authorization/roleDefinitions@2022-04-01' existing = {
  // scope: resourceGroup
  name: roles.containers.acrPush
}

resource acrPullRole 'Microsoft.Authorization/roleDefinitions@2022-04-01' existing = {
  // scope: resourceGroup
  name: roles.containers.acrPull
}

var acrPushIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: acrPushRole.id
    principalType: identity.principalType
  }
]

var acrPullIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: acrPullRole.id
    principalType: identity.principalType
  }
]

var containerRegistryPEName = '${abbrs.containers.containerRegistry}${abbrs.security.privateEndpoint}${suffix}'
module containerRegistryPe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: containerRegistryPEName
  // scope: resourceGroup
  params: {
    location: location
    name: containerRegistryPEName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: containerRegistry.outputs.id
    groupIds: ['registry']
    dnsZoneId: _networkIsolation?containerRegistryDnsZone.outputs.id:''
  }
}

var crManagedIdentityName = '${abbrs.security.managedIdentity}${abbrs.containers.containerRegistry}-${suffix}'
module crManagedIdentity './security/managed-identity.bicep' = {
  name: crManagedIdentityName
  // scope: resourceGroup
  params: {
    name: crManagedIdentityName
    location: location
    tags: union(tags, {})
  }
}

var containerRegistryName = '${abbrs.containers.containerRegistry}${suffix}'
module containerRegistry 'containers/container-registry.bicep' = {
  name: containerRegistryName
  // scope: resourceGroup
  params: {
    identityId: crManagedIdentity.outputs.id
    containerRegistryReuse: _azureReuseConfig.containerRegistryReuse
    existingContainerRegistryResourceGroupName: _azureReuseConfig.existingContainerRegistryResourceGroupName
    name: containerRegistryName
    location: location
    tags: union(tags, {})
    sku: {
      name: 'Premium'
    }
    adminUserEnabled: true
    roleAssignments: concat(acrPushIdentityAssignments, acrPullIdentityAssignments, [])
    publicNetworkAccess: 'Enabled'  //This gets overridden by the private endpoint and the network isolation
  }
}

var caeManagedIdentityName = '${abbrs.security.managedIdentity}${abbrs.containers.containerAppsEnvironment}${suffix}'
module caeManagedIdentity './security/managed-identity.bicep' = {
  name: caeManagedIdentityName
  // scope: resourceGroup
  params: {
    name: caeManagedIdentityName
    location: location
    tags: union(tags, {})
  }
}

var containerAppsPeName = '${abbrs.containers.containerAppsEnvironment}${abbrs.security.privateEndpoint}${suffix}'
module containerAppPe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: containerAppsPeName
  // scope: resourceGroup
  params: {
    location: location
    name: containerAppsPeName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: containerAppsEnvironment.outputs.id
    groupIds: ['managedEnvironments']
    dnsZoneId: _networkIsolation?acaDnsZone.outputs.id:''
  }
}

var containerAppsEnvironmentName = '${abbrs.containers.containerAppsEnvironment}${suffix}'
module containerAppsEnvironment 'containers/container-apps-environment.bicep' = {
  name: containerAppsEnvironmentName
  // scope: resourceGroup
  params: {
    identityId: caeManagedIdentity.outputs.id
    name: containerAppsEnvironmentName
    location: location
    tags: union(tags, {})
    logAnalyticsWorkspaceName: logAnalyticsWorkspace.outputs.name
    applicationInsightsName: applicationInsights.outputs.name
    workloadProfiles: [
      {
        workloadProfileType: 'D4'
        name: 'main'
        //enableFips: false
        minimumCount: 0
        maximumCount: 1
      }
    ]
    vnetConfig: {
      infrastructureSubnetId: _networkIsolation?vnet.outputs.acaSubId:''
      internal: true
    }
  }
}

module containerAppsDnsZone './network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'cae-dnzones'
  // scope: resourceGroup
  params: {
    dnsZoneName: concat('privatelink.', split(containerAppsEnvironment.outputs.properties.defaultDomain, '.')[1], '.azurecontainerapps.io')
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

resource azureMLDataScientistRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  // scope: resourceGroup
  name: roles.ai.azureMLDataScientist
}

var azureMLDataScientistRoleAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: azureMLDataScientistRole.id
    principalType: identity.principalType
  }
]

var aiHubPeName = '${abbrs.ai.aiHub}${abbrs.security.privateEndpoint}${suffix}'
module aiHubPe './network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: aiHubPeName
  // scope: resourceGroup
  params: {
    location: location
    name: aiHubPeName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: aiHub.outputs.id
    groupIds: ['amlworkspace']
    dnsZoneId: _networkIsolation?blobDnsZone.outputs.id:''
  }
}

var aiHubName = '${abbrs.ai.aiHub}${suffix}'
module aiHub './ai_ml/ai-hub.bicep' = {
  name: aiHubName
  // scope: resourceGroup
  params: {
    name: aiHubName
    friendlyName: 'Hub - Python AI Document Pipeline Sample'
    descriptionInfo: 'Generated by the AI Document Pipeline Python sample project'
    location: location
    tags: union(tags, {})
    storageAccountId: storageAccount.outputs.id
    keyVaultId: keyVault.outputs.id
    applicationInsightsId: applicationInsights.outputs.id
    containerRegistryId: containerRegistry.outputs.id
    aiServicesName: aiServices.outputs.name
    roleAssignments: concat(azureMLDataScientistRoleAssignments, [])
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
  }
}

var aiHubProjectName = '${abbrs.ai.aiHubProject}${suffix}'
module aiHubProject './ai_ml/ai-hub-project.bicep' = {
  name: aiHubProjectName
  // scope: resourceGroup
  params: {
    name: aiHubProjectName
    friendlyName: 'Project - Python AI Document Pipeline Sample'
    descriptionInfo: 'Generated by the AI Document Pipeline Python sample project'
    location: location
    tags: union(tags, {})
    aiHubName: aiHub.outputs.name
    roleAssignments: concat(azureMLDataScientistRoleAssignments, [])
  }
}

var vmManagedIdentityName = '${abbrs.security.managedIdentity}${abbrs.compute.virtualMachine}${suffix}'
module vmManagedIdentity './security/managed-identity.bicep' = if (_networkIsolation && !_vnetReuse && _deployVM) {
  // scope: resourceGroup
  name: vmManagedIdentityName
  params: {
    name: vmManagedIdentityName
    location: location
    tags: union(tags, {})
  }
}

module testvm './vm/dsvm.bicep' = if (_networkIsolation && !_vnetReuse && _deployVM)  {
  name: 'testvm'
  // scope: resourceGroup
  params: {
    location: location
    name: _ztVmName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    bastionSubId: _networkIsolation?vnet.outputs.bastionSubId:''
    vmUserPassword: vmUserInitialPassword
    vmUserName: _vmUserName
    keyVaultName: keyVault.name
    // this is the named of the secret to store the vm password in keyvault. It matches what is used on main.parameters.json
    vmUserPasswordKey: _vmKeyVaultSecName
    identityId: vmManagedIdentity.outputs.id
    identityClientId: vmManagedIdentity.outputs.clientId
    identityPrincipalId: vmManagedIdentity.outputs.principalId
  }
}

var functionsWebJobStorageVariableName = 'AzureWebJobsStorage'
var documentsConnectionStringVariableName = 'AZURE_STORAGE_QUEUES_CONNECTION_STRING'
var applicationInsightsConnectionStringSecretName = 'applicationinsightsconnectionstring'
var applicationInsightsKeySecretName = 'applicationinsightskey'


module containerAppManagedIdentity './security/managed-identity.bicep' = {
  name: '${abbrs.security.managedIdentity}${abbrs.containers.containerApp}${suffix}'
  // scope: resourceGroup
  params: {
    name: '${abbrs.security.managedIdentity}${abbrs.containers.containerApp}${suffix}'
    location: location
    tags: union(tags, {})
  }
}

module containerRegistryIdentityRoleAssignment './security/resource-role-assignment.json' = {
  name: 'containerRegistryIdentityRoleAssignment'
  // scope: resourceGroup
  params: {
    resourceId: containerRegistry.outputs.id
    roleAssignments: [
      {
        principalId: applicationManagedIdentity.outputs.principalId
        roleDefinitionId: acrPullRole.id
        principalType: 'ServicePrincipal'
      }
    ]
  }
}

module storageAccountIdentityRoleAssignment './security/resource-role-assignment.json' = {
  name: 'storageAccountIdentityRoleAssignment'
  // scope: resourceGroup
  params: {
    resourceId: storageAccount.outputs.id
    roleAssignments: [
      {
        principalId: containerAppManagedIdentity.outputs.principalId
        roleDefinitionId: storageAccountContributorRole.id
        principalType: 'ServicePrincipal'
      }
      {
        principalId: containerAppManagedIdentity.outputs.principalId
        roleDefinitionId: storageBlobDataContributorRole.id
        principalType: 'ServicePrincipal'
      }
      {
        principalId: containerAppManagedIdentity.outputs.principalId
        roleDefinitionId: storageBlobDataOwnerRole.id
        principalType: 'ServicePrincipal'
      }
      {
        principalId: containerAppManagedIdentity.outputs.principalId
        roleDefinitionId: storageFileDataPrivilegedContributorRole.id
        principalType: 'ServicePrincipal'
      }
      {
        principalId: containerAppManagedIdentity.outputs.principalId
        roleDefinitionId: storageTableDataContributorRole.id
        principalType: 'ServicePrincipal'
      }
      {
        principalId: containerAppManagedIdentity.outputs.principalId
        roleDefinitionId: storageQueueDataContributorRole.id
        principalType: 'ServicePrincipal'
      }
    ]
  }
}

module aiServicesIdentityRoleAssignment './security/resource-role-assignment.json' = {
  name: 'aiServicesIdentityRoleAssignment'
  // scope: resourceGroup
  params: {
    resourceId: aiServices.outputs.id
    roleAssignments: [
      {
        principalId: applicationManagedIdentity.outputs.principalId
        roleDefinitionId: appConfigDataOwnerRole.id
        principalType: 'ServicePrincipal'
      }
      {
        principalId: applicationManagedIdentity.outputs.principalId
        roleDefinitionId: cognitiveServicesUserRole.id
        principalType: 'ServicePrincipal'
      }
      {
        principalId: applicationManagedIdentity.outputs.principalId
        roleDefinitionId: cognitiveServicesOpenAIUserRole.id
        principalType: 'ServicePrincipal'
      }
    ]
  }
}

var documentsQueueName = 'documents'
module documentsQueue './storage/storage-queue.bicep' = {
  name: '${abbrs.storage.storageAccount}${suffix}-${documentsQueueName}'
  // scope: resourceGroup
  params: {
    name: documentsQueueName
    storageAccountName: storageAccount.name
  }
}

module containerApp './containers/container-app.bicep' = {
  name: '${abbrs.containers.containerApp}${suffix}'
  // scope: resourceGroup
  params: {
    name: '${abbrs.containers.containerApp}${suffix}'
    location: location
    tags: union(tags, { App: 'ai-document-pipeline' })
    containerAppsEnvironmentId: containerAppsEnvironment.outputs.id
    containerAppIdentityId: containerAppManagedIdentity.outputs.id
    imageInContainerRegistry: false
    containerRegistryName: containerRegistry.name
    containerImageName: 'mcr.microsoft.com/k8se/quickstart:latest'
    containerIngress: {
      external: true
      targetPort: 80
      transport: 'auto'
      allowInsecure: false
    }
    containerScale: {
      minReplicas: 1
      maxReplicas: 3
      rules: [
        {
          name: 'http'
          http: {
            metadata: {
              concurrentRequests: '20'
            }
          }
        }
      ]
    }
    secrets: [
      {
        name: applicationInsightsConnectionStringSecretName
        value: applicationInsights.outputs.connectionString
      }
      {
        name: applicationInsightsKeySecretName
        value: applicationInsights.outputs.instrumentationKey
      }
    ]
    environmentVariables: [
      {
        name: 'AzureWebJobsFeatureFlags'
        value: 'EnableWorkerIndexing'
      }
      {
        name: 'FUNCTIONS_EXTENSION_VERSION'
        value: '~4'
      }
      {
        name: 'FUNCTIONS_WORKER_RUNTIME'
        value: 'python'
      }
      {
        name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
        secretRef: applicationInsightsConnectionStringSecretName
      }
      {
        name: 'APPINSIGHTS_INSTRUMENTATIONKEY'
        secretRef: applicationInsightsKeySecretName
      }
      {
        name: 'ApplicationInsights_InstrumentationKey'
        secretRef: applicationInsightsKeySecretName
      }
      {
        name: 'AZURE_APPCONFIG_URL'
        value: concat('https://', appConfig.name , '.azconfig.io')
      }
      {
        name: '${functionsWebJobStorageVariableName}__accountName'
        value: storageAccount.name
      }
      {
        name: '${functionsWebJobStorageVariableName}__credential'
        value: 'managedidentity'
      }
      {
        name: '${functionsWebJobStorageVariableName}__clientId'
        value: containerAppManagedIdentity.outputs.clientId
      }
      {
        name: 'AZURE_CLIENT_ID'
        value: containerAppManagedIdentity.outputs.clientId
      }
      {
        name: 'AZURE_TENANT_ID'
        value: tenantId
      }
      {
        name: 'AZURE_AISERVICES_ENDPOINT'
        value: aiServices.outputs.endpoint
      }
      {
        name: 'AZURE_OPENAI_ENDPOINT'
        value: aiServices.outputs.endpoint
      }
      {
        name: 'AZURE_OPENAI_CHAT_DEPLOYMENT'
        value: chatModelDeploymentModel
      }
      {
        name: 'AZURE_STORAGE_ACCOUNT'
        value: storageAccount.name
      }
      {
        name: '${documentsConnectionStringVariableName}__accountName'
        value: storageAccount.name
      }
      {
        name: '${documentsConnectionStringVariableName}__credential'
        value: 'managedidentity'
      }
      {
        name: '${documentsConnectionStringVariableName}__clientId'
        value: containerAppManagedIdentity.outputs.clientId
      }
      {
        name: 'WEBSITE_HOSTNAME'
        value: 'localhost'
      }
      {
        name: 'WEBSITE_HTTPLOGGING_RETENTION_DAYS'
        value: '7'
      }
      {
        name: 'WEBSITE_VNET_ROUTE_ALL'
        value: '0'
      }
      {
        name: 'WEBSITE_HOSTNAME'
        value: 'localhost'
      }
      {
        name: 'allow_environment_variables'
        value: 'true'
      }
    ]
  }
}

output environmentInfo object = {
  workloadName: workloadName
  azureResourceGroup: workloadName
  azureLocation: location
  containerRegistryName: containerRegistry.outputs.name
  azureAIServicesEndpoint: aiServices.outputs.endpoint
  azureOpenAIEndpoint: aiServices.outputs.openAIEndpoint
  azureOpenAIChatDeployment: chatModelDeployment.name
  azureStorageAccount: storageAccount.outputs.name
  documentsContainerName: documentsContainerName
  appConfigurationName : appConfig.outputs.name
}
